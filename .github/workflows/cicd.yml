name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  # Build and docker job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 11 for building the backend (Spring Boot)
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      # Build the Spring Boot backend
      - name: Build application with Maven
        run: |
          cd app
          mvn clean install -DskipTests

      # Set up Node.js for building the frontend (React)
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      # Build the frontend
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Docker build and push job
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and push the Docker image
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest

  # Deployment job to AWS ECS
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS CLI with Access Key and Secret Key
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1  # Set your region

      # Update the ECS task definition and deploy to ECS
      - name: Deploy to AWS ECS
        run: |
          # Update ECS task definition with the new image URI
          echo "Updating ECS task definition"
          sed -i "s|<IMAGE_URI>|${{ secrets.DOCKER_USERNAME }}/spring-boot-app:latest|g" ecs-task-definition.json

          # Register the updated ECS task definition
          TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json file://ecs-task-definition.json)
          
          # Update ECS service with the new task definition
          SERVICE_NAME="springboot-service"  # Replace with your ECS service name
          CLUSTER_NAME="ecs-cluster"  # Replace with your ECS cluster name
          TASK_FAMILY=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.family')
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_FAMILY
