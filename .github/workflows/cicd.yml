name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - dev

jobs:
  # Backend build, test, and docker jobs
  backend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
      
      - name: Build backend with Maven
        run: |
          cd backend
          mvn clean install -DskipTests
      
      - name: Test backend
        run: |
          cd backend
          mvn test

  backend-docker:
    needs: backend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend Docker image
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-backend:latest .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-backend:latest

  # Frontend build, test, and docker jobs
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Test frontend
        run: |
          cd frontend
          npm test

  frontend-docker:
    needs: frontend-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push frontend Docker image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-boot-frontend:latest .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot-frontend:latest

  # Deployment job
  deploy:
    needs: [backend-docker, frontend-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1 # Change to your desired region

      - name: Deploy to AWS ECS
        run: |
          # Update the ECS task definition with the new image URI
          echo "Updating ECS task definition"
          sed -i "s|<BACKEND_IMAGE_URI>|${{ secrets.DOCKER_USERNAME }}/spring-boot-backend:latest|g" ecs-task-definition.json
          sed -i "s|<FRONTEND_IMAGE_URI>|${{ secrets.DOCKER_USERNAME }}/spring-boot-frontend:latest|g" ecs-task-definition.json

          # Register the new task definition
          TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json file://ecs-task-definition.json)
          
          # Update the ECS service with the new task definition
          SERVICE_NAME="your-service-name" # Replace with your service name
          CLUSTER_NAME="your-cluster-name" # Replace with your cluster name
          TASK_FAMILY=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.family')
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_FAMILY
